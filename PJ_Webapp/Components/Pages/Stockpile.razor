@page "/Stockpile"
@inject DBServices db
@using PJ_Webapp.Models
@using PJ_Webapp.Data
@using PJ_Webapp.Models.Enums
@rendermode InteractiveServer
<link rel="stylesheet" href="site.css"/>
<h3>The Stockpile</h3>
@if (db.GetResources().Count < STARTING_RESOURCES)
{
    InitializeResources();
}
@foreach (ResourceCategory category in Enum.GetValues(typeof(ResourceCategory)))
{
    <div id="rc-block">
        <h4>@category</h4>
        <ul>
            @foreach (Resource resource in db.GetResources())
            {
                if (resource.category == category)
                {
                    <div class="rc-container">
                        <li>@resource.name : @resource.amount</li>
                    </div>
                }
            }
        </ul>
        
    </div>
}

<button @onclick="() => {createNewResourceMenuOpen = true;}">Create New Resource</button>

@if (createNewResourceMenuOpen)
{
    <div class="info-panel">
        <button class="exit-button" @onclick="() => {createNewResourceMenuOpen = false;}">X</button>
        <span>Name: </span> <input type="text" @bind="newResourceName"/>
        <br/>
        <span>Amount: </span> <input type="number" @bind="newResourceAmount"/>
        <br/>
        <button class="btn-success" @onclick="CreateCustomResource">Create</button>
        @if (dialogueBoxOpen)
        {
            <div class="popup" id="new-resource-menu-result">
                <p>@dialogueText</p>
                <button @onclick="() => {dialogueBoxOpen = false; }">Close</button>
            </div>
            
        }
        </div>
}

@code {
    //UI Variables
    //TODO generalize these into a function, maybe make a UI handler service we can dependency inject?
    bool createNewResourceMenuOpen = false;
    bool dialogueBoxOpen = false;
    string dialogueText;
    
    //New resource form binds
    string newResourceName;
    int newResourceAmount;

    //Init variables
    int STARTING_RESOURCES = 23;
    
    private void InitializeResources()
    {
        foreach (ResourceType resourceType in Enum.GetValues(typeof(ResourceType)))
        {
            Resource newResource = new Resource(resourceType, 0);
            db.SaveData(newResource);
            db.SaveChanges();
        }
        StateHasChanged();
    }
    
    private void CreateCustomResource()
    {
        bool formFilled = newResourceName != null && newResourceAmount != null;
        if (formFilled)
        {
            Resource newResource = new Resource(newResourceName, newResourceAmount);

            bool resourceAlreadyExists = false;
            foreach (Resource resource in db.GetResources())
            {
                if (resource.name == newResource.name)
                {
                    resourceAlreadyExists = true;
                }
                
            }

            if (resourceAlreadyExists)
            {
                DialogueBox("Resource already exists, update the regular way!");
            }
            else
            {
                db.SaveData(newResource);
                db.SaveChanges();
                DialogueBox("Success!");
                StateHasChanged();
            }
            
        }
        else
        {
            DialogueBox("You must fill out the entire form!");
        }
        
    }

    private void DialogueBox(string message)
    {
        this.dialogueText = message;
        dialogueBoxOpen = true;
    }
}