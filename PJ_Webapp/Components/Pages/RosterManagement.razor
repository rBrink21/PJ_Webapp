@page "/RosterManagement"
@using PJ_Webapp.Data
@using PJ_Webapp.Models
@using PJ_Webapp.Models.Enums
@inject DBServices db
@rendermode InteractiveServer
<link rel="stylesheet" href="site.css"/>
<h3>Roster Management</h3>
<div id="soldier-container">
    @foreach (Soldier soldier in db.GetSoldiers())
    {
        if (soldier == null) { return; }
        
        <div class="soldier-element card mb-3">
            <div class="card-body">
                <h4 class="card-title">Soldier Information</h4>
                <p class="card-text">Name: @soldier.name</p>
                <p class="card-text">Loyalty: @soldier.loyalty.ToCustomString()</p>
                <p class="card-text">Class: @soldier.soldierClass.ToCustomString()</p>
                <p class="card-text">Race: @soldier.soldierRace.ToCustomString()</p>
                
                <h5 class="card-title">Status</h5>
                <p class="card-text">Level: @soldier.level</p>
                <p class="card-text">Health: @soldier.currentHealth / @soldier.maxHealth</p>
                <p class="card-text">Mental: @soldier.mental</p>
                <h5 class="card-title">Skills</h5>
                @foreach (Skill skill in soldier.skills)
                {
                    <div class="badge">
                    <span class="badge badge-primary">@skill.name.ToCustomString()</span>
                    <span class="badge badge-secondary">@skill.level</span>
                    </div>
                    <br />
                }
                
                <h5 class="card-title">Management</h5>
                <button class="btn btn-success" @onclick="() => SelectSoldier(soldier)">Select</button>
                <button class="btn btn-danger" @onclick="() => { Console.WriteLine(soldier.name); DeleteSoldier(soldier); }">Delete Soldier</button>
            </div>
        </div>
    }
</div>

@if (selectedSoldier != null)
{
    <div id="selection-screen">
        <h3>@selectedSoldier.name</h3>
        @if (selectedSoldier.soldierClass != null)
        {
            <h6>@selectedSoldier.soldierClass.ToCustomString()</h6>
        }
        <button @onclick="() => {selectedSoldier = null; }" class="exit-button"><b>X</b></button>
        <div id="selected-vitals">
            <h5><b>Vitals</b></h5>
            <div class="stat-container">
                <button class="adjust-btn" @onclick="() => UpdateMental(selectedSoldier,-1)">-</button>
                <span>Mental: @selectedSoldier.mental</span>
                <button class="adjust-btn" @onclick="() => UpdateMental(selectedSoldier,1)">+</button>
            </div>
            <div class="stat-container">
                <button class="adjust-btn" @onclick="() => UpdateHP(selectedSoldier, -1)">-</button>
                <span>Health: @selectedSoldier.currentHealth</span>
                <button class="adjust-btn" @onclick="() => UpdateHP(selectedSoldier,1)">+</button>
            </div>
            <span>Level: @selectedSoldier.level</span>
            <span>Max Health: @selectedSoldier.maxHealth</span>
        </div>
        
        <div id="selected-skills">
            <h5><b>Skills</b></h5>
            @if (selectedSoldier.availableSkillPoints > 0)
            {
                <span>Available points: @selectedSoldier.availableSkillPoints</span>
            }
            @foreach (Skill skill in selectedSoldier.skills)
            {
                <div class="stat-container">
                    <span>@skill.name.ToCustomString() : @skill.level</span>
                    @if (selectedSoldier.availableSkillPoints >= skill.GetUpgradeCost())
                    {
                        <button class="adjust-btn" @onclick="() => UpgradeSkill(selectedSoldier,skill)">+ (@skill.GetUpgradeCost())</button>
                    }                    
                </div>

            }
            
        </div>
        
        <div id="Functions">
            <h5><b>Functions</b></h5>
            @if (!selectedSoldier.roleAvailableForAssignment)
            {
                <button @onclick="() => {LevelUpSoldier(selectedSoldier);}">Level up</button>
            }
            @if (selectedSoldier.roleAvailableForAssignment)
            {
                <button @onclick="() => {classSelectionScreenOpen = true; }">Select Class</button>
            }
            @if (classSelectionScreenOpen)
            {
                <div id="class-selection-screen">
                    <button @onclick="() => {classSelectionScreenOpen = false;}" class="exit-button"><b>X</b></button>
                    <h3>Class Selection</h3>
                    @foreach (SoldierClass role in Enum.GetValues(typeof(SoldierClass)))
                    {
                        if (role != SoldierClass.GRUNT)
                        {
                            <button @onclick="() => {AssignClass(selectedSoldier,role);}">@role.ToCustomString()</button>
                        }
                    }
                </div>
            }
        </div>
    </div>


}
    
@code {

    //TODO grab playerId from session
    public int playerId = 1;
    Soldier selectedSoldier = null;
    private bool classSelectionScreenOpen = false;
    private bool selectedSoldierScreenOpen = false;

    private void UpgradeSkill(Soldier soldier, Skill skill)
    {
        soldier.UpgradeSkill(skill);
        StateHasChanged();
        db.SaveChanges();
    }
    private void AssignClass(Soldier soldier, SoldierClass role)
    {
        soldier.AssignClass(role);
        StateHasChanged();
        classSelectionScreenOpen = false;
        db.SaveChanges();
    }

    private bool LevelUpSoldier(Soldier soldier)
    {
        bool canLevel = true; //TODO add sensible checks
        if (canLevel)
        {
            soldier.LevelUp();
        }

        //For displaying the succesfull/unsuccesfull textbox
        db.SaveChanges();
        StateHasChanged();
        return canLevel;
    }

    private void UpdateHP(Soldier soldier, int changeAmount)
    {
        int newAmount = soldier.currentHealth + changeAmount;
        Console.WriteLine((newAmount));
        soldier.currentHealth = Math.Clamp(newAmount, 0, soldier.maxHealth);
        db.SaveChanges();
        StateHasChanged();
    }

    private void UpdateMental(Soldier soldier, int changeAmount)
    {
        int newAmount = soldier.mental + changeAmount;
        soldier.mental = Math.Clamp(newAmount, -1, 5);
        db.SaveChanges();
        StateHasChanged();

    }

    private void SelectSoldier(Soldier soldier)
    {
        if (selectedSoldier != null)
        {
            selectedSoldier = null;
        }
        else
        {
            selectedSoldier = soldier;
        }
    }

    private void DeleteSoldier(Soldier soldier)
    {
        db.DeleteSoldier(soldier);
        StateHasChanged();

        if (selectedSoldier == soldier)
        {
            selectedSoldier = null;
        }
    }

}